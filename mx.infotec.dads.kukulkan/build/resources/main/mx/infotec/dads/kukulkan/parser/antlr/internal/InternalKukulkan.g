/*
 * generated by Xtext 2.13.0
 */
grammar InternalKukulkan;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package mx.infotec.dads.kukulkan.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package mx.infotec.dads.kukulkan.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mx.infotec.dads.kukulkan.services.KukulkanGrammarAccess;

}

@parser::members {

 	private KukulkanGrammarAccess grammarAccess;

    public InternalKukulkanParser(TokenStream input, KukulkanGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "domainModel";
   	}

   	@Override
   	protected KukulkanGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuledomainModel
entryRuledomainModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	iv_ruledomainModel=ruledomainModel
	{ $current=$iv_ruledomainModel.current; }
	EOF;

// Rule domainModel
ruledomainModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainModelAccess().getEntitiesEntityParserRuleCall_0_0());
				}
				lv_entities_0_0=ruleentity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainModelRule());
					}
					add(
						$current,
						"entities",
						lv_entities_0_0,
						"mx.infotec.dads.kukulkan.Kukulkan.entity");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainModelAccess().getSettingsOptionParserRuleCall_1_0());
				}
				lv_settings_1_0=ruleoption
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainModelRule());
					}
					add(
						$current,
						"settings",
						lv_settings_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.option");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleentity
entryRuleentity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleentity=ruleentity
	{ $current=$iv_ruleentity.current; }
	EOF;

// Rule entity
ruleentity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					lv_tableName_3_0=RULE_ID
					{
						newLeafNode(lv_tableName_3_0, grammarAccess.getEntityAccess().getTableNameIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEntityRule());
						}
						setWithLastConsumed(
							$current,
							"tableName",
							lv_tableName_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getEntityAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		(
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getEntityAccess().getFieldsEntityFieldParserRuleCall_3_1_0_0());
						}
						lv_fields_6_0=ruleentityField
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEntityRule());
							}
							add(
								$current,
								"fields",
								lv_fields_6_0,
								"mx.infotec.dads.kukulkan.Kukulkan.entityField");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						otherlv_7=','
						{
							newLeafNode(otherlv_7, grammarAccess.getEntityAccess().getCommaKeyword_3_1_1_0());
						}
					)?
					(
						(
							{
								newCompositeNode(grammarAccess.getEntityAccess().getFieldsEntityFieldParserRuleCall_3_1_1_1_0());
							}
							lv_fields_8_0=ruleentityField
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getEntityRule());
								}
								add(
									$current,
									"fields",
									lv_fields_8_0,
									"mx.infotec.dads.kukulkan.Kukulkan.entityField");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleentityField
entryRuleentityField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityFieldRule()); }
	iv_ruleentityField=ruleentityField
	{ $current=$iv_ruleentityField.current; }
	EOF;

// Rule entityField
ruleentityField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getEntityFieldAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntityFieldRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityFieldAccess().getTypeFieldTypeParserRuleCall_1_0());
				}
				lv_type_1_0=rulefieldType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.fieldType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefieldType
entryRulefieldType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldTypeRule()); }
	iv_rulefieldType=rulefieldType
	{ $current=$iv_rulefieldType.current; }
	EOF;

// Rule fieldType
rulefieldType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFieldTypeAccess().getStringFieldTypeParserRuleCall_0());
		}
		this_stringFieldType_0=rulestringFieldType
		{
			$current = $this_stringFieldType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldTypeAccess().getNumericFieldTypeParserRuleCall_1());
		}
		this_numericFieldType_1=rulenumericFieldType
		{
			$current = $this_numericFieldType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldTypeAccess().getBooleanFieldTypeParserRuleCall_2());
		}
		this_booleanFieldType_2=rulebooleanFieldType
		{
			$current = $this_booleanFieldType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldTypeAccess().getDateFieldTypeParserRuleCall_3());
		}
		this_dateFieldType_3=ruledateFieldType
		{
			$current = $this_dateFieldType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldTypeAccess().getBlobFieldTypeParserRuleCall_4());
		}
		this_blobFieldType_4=ruleblobFieldType
		{
			$current = $this_blobFieldType_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldTypeAccess().getEntityTypeParserRuleCall_5());
		}
		this_entityType_5=ruleentityType
		{
			$current = $this_entityType_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleentityType
entryRuleentityType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityTypeRule()); }
	iv_ruleentityType=ruleentityType
	{ $current=$iv_ruleentityType.current; }
	EOF;

// Rule entityType
ruleentityType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getEntityTypeAccess().getEntityParserRuleCall());
	}
	this_entity_0=ruleentity
	{
		$current = $this_entity_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulestringFieldType
entryRulestringFieldType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringFieldTypeRule()); }
	iv_rulestringFieldType=rulestringFieldType
	{ $current=$iv_rulestringFieldType.current; }
	EOF;

// Rule stringFieldType
rulestringFieldType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStringFieldTypeAccess().getNameStringTypeParserRuleCall_0_0());
				}
				lv_name_0_0=rulestringType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringFieldTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"mx.infotec.dads.kukulkan.Kukulkan.stringType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStringFieldTypeAccess().getConstraintsStringValidatorsParserRuleCall_1_0());
				}
				lv_constraints_1_0=rulestringValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringFieldTypeRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.stringValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulestringType
entryRulestringType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	iv_rulestringType=rulestringType
	{ $current=$iv_rulestringType.current.getText(); }
	EOF;

// Rule stringType
rulestringType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='String'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getStringTypeAccess().getStringKeyword());
	}
;

// Entry rule entryRulenumericFieldType
entryRulenumericFieldType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericFieldTypeRule()); }
	iv_rulenumericFieldType=rulenumericFieldType
	{ $current=$iv_rulenumericFieldType.current; }
	EOF;

// Rule numericFieldType
rulenumericFieldType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericFieldTypeAccess().getNameNumericTypesParserRuleCall_0_0());
				}
				lv_name_0_0=rulenumericTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericFieldTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"mx.infotec.dads.kukulkan.Kukulkan.numericTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericFieldTypeAccess().getConstraintsNumericValidatorsParserRuleCall_1_0());
				}
				lv_constraints_1_0=rulenumericValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericFieldTypeRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.numericValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulenumericTypes
entryRulenumericTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumericTypesRule()); }
	iv_rulenumericTypes=rulenumericTypes
	{ $current=$iv_rulenumericTypes.current.getText(); }
	EOF;

// Rule numericTypes
rulenumericTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumericTypesAccess().getINTEGERParserRuleCall_0());
		}
		this_INTEGER_0=ruleINTEGER
		{
			$current.merge(this_INTEGER_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericTypesAccess().getLONGParserRuleCall_1());
		}
		this_LONG_1=ruleLONG
		{
			$current.merge(this_LONG_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericTypesAccess().getBIG_DECIMALParserRuleCall_2());
		}
		this_BIG_DECIMAL_2=ruleBIG_DECIMAL
		{
			$current.merge(this_BIG_DECIMAL_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericTypesAccess().getFLOATParserRuleCall_3());
		}
		this_FLOAT_3=ruleFLOAT
		{
			$current.merge(this_FLOAT_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericTypesAccess().getDOUBLEParserRuleCall_4());
		}
		this_DOUBLE_4=ruleDOUBLE
		{
			$current.merge(this_DOUBLE_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleINTEGER
entryRuleINTEGER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINTEGERRule()); }
	iv_ruleINTEGER=ruleINTEGER
	{ $current=$iv_ruleINTEGER.current.getText(); }
	EOF;

// Rule INTEGER
ruleINTEGER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Integer'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getINTEGERAccess().getIntegerKeyword());
	}
;

// Entry rule entryRuleLONG
entryRuleLONG returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLONGRule()); }
	iv_ruleLONG=ruleLONG
	{ $current=$iv_ruleLONG.current.getText(); }
	EOF;

// Rule LONG
ruleLONG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Long'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLONGAccess().getLongKeyword());
	}
;

// Entry rule entryRuleBIG_DECIMAL
entryRuleBIG_DECIMAL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBIG_DECIMALRule()); }
	iv_ruleBIG_DECIMAL=ruleBIG_DECIMAL
	{ $current=$iv_ruleBIG_DECIMAL.current.getText(); }
	EOF;

// Rule BIG_DECIMAL
ruleBIG_DECIMAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='BigDecimal'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBIG_DECIMALAccess().getBigDecimalKeyword());
	}
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current.getText(); }
	EOF;

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Float'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFLOATAccess().getFloatKeyword());
	}
;

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); }
	iv_ruleDOUBLE=ruleDOUBLE
	{ $current=$iv_ruleDOUBLE.current.getText(); }
	EOF;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Double'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDOUBLEAccess().getDoubleKeyword());
	}
;

// Entry rule entryRulebooleanFieldType
entryRulebooleanFieldType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanFieldTypeRule()); }
	iv_rulebooleanFieldType=rulebooleanFieldType
	{ $current=$iv_rulebooleanFieldType.current; }
	EOF;

// Rule booleanFieldType
rulebooleanFieldType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanFieldTypeAccess().getNameBOOLEAN_TYPEParserRuleCall_0_0());
				}
				lv_name_0_0=ruleBOOLEAN_TYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanFieldTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"mx.infotec.dads.kukulkan.Kukulkan.BOOLEAN_TYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanFieldTypeAccess().getRequiredRequiredValidatorParserRuleCall_1_0());
				}
				lv_required_1_0=rulerequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanFieldTypeRule());
					}
					set(
						$current,
						"required",
						lv_required_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.requiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleBOOLEAN_TYPE
entryRuleBOOLEAN_TYPE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEAN_TYPERule()); }
	iv_ruleBOOLEAN_TYPE=ruleBOOLEAN_TYPE
	{ $current=$iv_ruleBOOLEAN_TYPE.current.getText(); }
	EOF;

// Rule BOOLEAN_TYPE
ruleBOOLEAN_TYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Boolean'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBOOLEAN_TYPEAccess().getBooleanKeyword());
	}
;

// Entry rule entryRuledateFieldType
entryRuledateFieldType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateFieldTypeRule()); }
	iv_ruledateFieldType=ruledateFieldType
	{ $current=$iv_ruledateFieldType.current; }
	EOF;

// Rule dateFieldType
ruledateFieldType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDateFieldTypeAccess().getTypeDateTypesParserRuleCall_0_0());
				}
				lv_type_0_0=ruledateTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDateFieldTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"mx.infotec.dads.kukulkan.Kukulkan.dateTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDateFieldTypeAccess().getRequiredRequiredValidatorParserRuleCall_1_0());
				}
				lv_required_1_0=rulerequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDateFieldTypeRule());
					}
					set(
						$current,
						"required",
						lv_required_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.requiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuledateTypes
entryRuledateTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDateTypesRule()); }
	iv_ruledateTypes=ruledateTypes
	{ $current=$iv_ruledateTypes.current.getText(); }
	EOF;

// Rule dateTypes
ruledateTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDateTypesAccess().getDATEParserRuleCall_0());
		}
		this_DATE_0=ruleDATE
		{
			$current.merge(this_DATE_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDateTypesAccess().getLOCAL_DATEParserRuleCall_1());
		}
		this_LOCAL_DATE_1=ruleLOCAL_DATE
		{
			$current.merge(this_LOCAL_DATE_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDateTypesAccess().getZONED_DATETIMEParserRuleCall_2());
		}
		this_ZONED_DATETIME_2=ruleZONED_DATETIME
		{
			$current.merge(this_ZONED_DATETIME_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDateTypesAccess().getINSTANTParserRuleCall_3());
		}
		this_INSTANT_3=ruleINSTANT
		{
			$current.merge(this_INSTANT_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDATE
entryRuleDATE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDATERule()); }
	iv_ruleDATE=ruleDATE
	{ $current=$iv_ruleDATE.current.getText(); }
	EOF;

// Rule DATE
ruleDATE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Date'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDATEAccess().getDateKeyword());
	}
;

// Entry rule entryRuleLOCAL_DATE
entryRuleLOCAL_DATE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLOCAL_DATERule()); }
	iv_ruleLOCAL_DATE=ruleLOCAL_DATE
	{ $current=$iv_ruleLOCAL_DATE.current.getText(); }
	EOF;

// Rule LOCAL_DATE
ruleLOCAL_DATE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='LocalDate'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLOCAL_DATEAccess().getLocalDateKeyword());
	}
;

// Entry rule entryRuleZONED_DATETIME
entryRuleZONED_DATETIME returns [String current=null]:
	{ newCompositeNode(grammarAccess.getZONED_DATETIMERule()); }
	iv_ruleZONED_DATETIME=ruleZONED_DATETIME
	{ $current=$iv_ruleZONED_DATETIME.current.getText(); }
	EOF;

// Rule ZONED_DATETIME
ruleZONED_DATETIME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='ZonedDateTime'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getZONED_DATETIMEAccess().getZonedDateTimeKeyword());
	}
;

// Entry rule entryRuleINSTANT
entryRuleINSTANT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINSTANTRule()); }
	iv_ruleINSTANT=ruleINSTANT
	{ $current=$iv_ruleINSTANT.current.getText(); }
	EOF;

// Rule INSTANT
ruleINSTANT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Instant'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getINSTANTAccess().getInstantKeyword());
	}
;

// Entry rule entryRuleblobFieldType
entryRuleblobFieldType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlobFieldTypeRule()); }
	iv_ruleblobFieldType=ruleblobFieldType
	{ $current=$iv_ruleblobFieldType.current; }
	EOF;

// Rule blobFieldType
ruleblobFieldType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBlobFieldTypeAccess().getNameBlobTypesParserRuleCall_0_0());
				}
				lv_name_0_0=ruleblobTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlobFieldTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"mx.infotec.dads.kukulkan.Kukulkan.blobTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBlobFieldTypeAccess().getConstraintsBlobValidatorsParserRuleCall_1_0());
				}
				lv_constraints_1_0=ruleblobValidators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlobFieldTypeRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.blobValidators");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleblobTypes
entryRuleblobTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBlobTypesRule()); }
	iv_ruleblobTypes=ruleblobTypes
	{ $current=$iv_ruleblobTypes.current.getText(); }
	EOF;

// Rule blobTypes
ruleblobTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBlobTypesAccess().getBLOBParserRuleCall_0());
		}
		this_BLOB_0=ruleBLOB
		{
			$current.merge(this_BLOB_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlobTypesAccess().getANY_BLOBParserRuleCall_1());
		}
		this_ANY_BLOB_1=ruleANY_BLOB
		{
			$current.merge(this_ANY_BLOB_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlobTypesAccess().getIMAGE_BLOBParserRuleCall_2());
		}
		this_IMAGE_BLOB_2=ruleIMAGE_BLOB
		{
			$current.merge(this_IMAGE_BLOB_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlobTypesAccess().getTEXT_BLOBParserRuleCall_3());
		}
		this_TEXT_BLOB_3=ruleTEXT_BLOB
		{
			$current.merge(this_TEXT_BLOB_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBLOB
entryRuleBLOB returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBLOBRule()); }
	iv_ruleBLOB=ruleBLOB
	{ $current=$iv_ruleBLOB.current.getText(); }
	EOF;

// Rule BLOB
ruleBLOB returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Blob'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBLOBAccess().getBlobKeyword());
	}
;

// Entry rule entryRuleANY_BLOB
entryRuleANY_BLOB returns [String current=null]:
	{ newCompositeNode(grammarAccess.getANY_BLOBRule()); }
	iv_ruleANY_BLOB=ruleANY_BLOB
	{ $current=$iv_ruleANY_BLOB.current.getText(); }
	EOF;

// Rule ANY_BLOB
ruleANY_BLOB returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='AnyBlob'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getANY_BLOBAccess().getAnyBlobKeyword());
	}
;

// Entry rule entryRuleIMAGE_BLOB
entryRuleIMAGE_BLOB returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIMAGE_BLOBRule()); }
	iv_ruleIMAGE_BLOB=ruleIMAGE_BLOB
	{ $current=$iv_ruleIMAGE_BLOB.current.getText(); }
	EOF;

// Rule IMAGE_BLOB
ruleIMAGE_BLOB returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='ImageBlob'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIMAGE_BLOBAccess().getImageBlobKeyword());
	}
;

// Entry rule entryRuleTEXT_BLOB
entryRuleTEXT_BLOB returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTEXT_BLOBRule()); }
	iv_ruleTEXT_BLOB=ruleTEXT_BLOB
	{ $current=$iv_ruleTEXT_BLOB.current.getText(); }
	EOF;

// Rule TEXT_BLOB
ruleTEXT_BLOB returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='TextBlob'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTEXT_BLOBAccess().getTextBlobKeyword());
	}
;

// Entry rule entryRulestringValidators
entryRulestringValidators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValidatorsRule()); }
	iv_rulestringValidators=rulestringValidators
	{ $current=$iv_rulestringValidators.current; }
	EOF;

// Rule stringValidators
rulestringValidators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValidatorsAccess().getRequiredRequiredValidatorParserRuleCall_0_0());
				}
				lv_required_0_0=rulerequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValidatorsRule());
					}
					set(
						$current,
						"required",
						lv_required_0_0,
						"mx.infotec.dads.kukulkan.Kukulkan.requiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValidatorsAccess().getMinLenghtMinLengthValidatorParserRuleCall_1_0());
				}
				lv_minLenght_1_0=ruleminLengthValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValidatorsRule());
					}
					set(
						$current,
						"minLenght",
						lv_minLenght_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.minLengthValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValidatorsAccess().getMaxLenghtMaxLengthValidatorParserRuleCall_2_0());
				}
				lv_maxLenght_2_0=rulemaxLengthValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValidatorsRule());
					}
					set(
						$current,
						"maxLenght",
						lv_maxLenght_2_0,
						"mx.infotec.dads.kukulkan.Kukulkan.maxLengthValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValidatorsAccess().getPatternPatternValidatorParserRuleCall_3_0());
				}
				lv_pattern_3_0=rulepatternValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValidatorsRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_3_0,
						"mx.infotec.dads.kukulkan.Kukulkan.patternValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulenumericValidators
entryRulenumericValidators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericValidatorsRule()); }
	iv_rulenumericValidators=rulenumericValidators
	{ $current=$iv_rulenumericValidators.current; }
	EOF;

// Rule numericValidators
rulenumericValidators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericValidatorsAccess().getRequiredRequiredValidatorParserRuleCall_0_0());
				}
				lv_required_0_0=rulerequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericValidatorsRule());
					}
					set(
						$current,
						"required",
						lv_required_0_0,
						"mx.infotec.dads.kukulkan.Kukulkan.requiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericValidatorsAccess().getMinValueMinValidatorParserRuleCall_1_0());
				}
				lv_minValue_1_0=ruleminValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericValidatorsRule());
					}
					set(
						$current,
						"minValue",
						lv_minValue_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.minValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericValidatorsAccess().getMaxValueMaxValidatorParserRuleCall_2_0());
				}
				lv_maxValue_2_0=rulemaxValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericValidatorsRule());
					}
					set(
						$current,
						"maxValue",
						lv_maxValue_2_0,
						"mx.infotec.dads.kukulkan.Kukulkan.maxValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleblobValidators
entryRuleblobValidators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlobValidatorsRule()); }
	iv_ruleblobValidators=ruleblobValidators
	{ $current=$iv_ruleblobValidators.current; }
	EOF;

// Rule blobValidators
ruleblobValidators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBlobValidatorsAccess().getRequiredRequiredValidatorParserRuleCall_0_0());
				}
				lv_required_0_0=rulerequiredValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlobValidatorsRule());
					}
					set(
						$current,
						"required",
						lv_required_0_0,
						"mx.infotec.dads.kukulkan.Kukulkan.requiredValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBlobValidatorsAccess().getMinBytesValueMinBytesValidatorParserRuleCall_1_0());
				}
				lv_minBytesValue_1_0=ruleminBytesValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlobValidatorsRule());
					}
					set(
						$current,
						"minBytesValue",
						lv_minBytesValue_1_0,
						"mx.infotec.dads.kukulkan.Kukulkan.minBytesValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBlobValidatorsAccess().getMaxBytesValueMaxBytesValidatorParserRuleCall_2_0());
				}
				lv_maxBytesValue_2_0=rulemaxBytesValidator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlobValidatorsRule());
					}
					set(
						$current,
						"maxBytesValue",
						lv_maxBytesValue_2_0,
						"mx.infotec.dads.kukulkan.Kukulkan.maxBytesValidator");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulerequiredValidator
entryRulerequiredValidator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRequiredValidatorRule()); }
	iv_rulerequiredValidator=rulerequiredValidator
	{ $current=$iv_rulerequiredValidator.current.getText(); }
	EOF;

// Rule requiredValidator
rulerequiredValidator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='required'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRequiredValidatorAccess().getRequiredKeyword());
	}
;

// Entry rule entryRuleminLengthValidator
entryRuleminLengthValidator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMinLengthValidatorRule()); }
	iv_ruleminLengthValidator=ruleminLengthValidator
	{ $current=$iv_ruleminLengthValidator.current.getText(); }
	EOF;

// Rule minLengthValidator
ruleminLengthValidator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='minlength'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinLengthValidatorAccess().getMinlengthKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinLengthValidatorAccess().getLeftParenthesisKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getMinLengthValidatorAccess().getINTTerminalRuleCall_2());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinLengthValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulemaxLengthValidator
entryRulemaxLengthValidator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMaxLengthValidatorRule()); }
	iv_rulemaxLengthValidator=rulemaxLengthValidator
	{ $current=$iv_rulemaxLengthValidator.current.getText(); }
	EOF;

// Rule maxLengthValidator
rulemaxLengthValidator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='maxlength'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaxLengthValidatorAccess().getMaxlengthKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaxLengthValidatorAccess().getLeftParenthesisKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getMaxLengthValidatorAccess().getINTTerminalRuleCall_2());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaxLengthValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulepatternValidator
entryRulepatternValidator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPatternValidatorRule()); }
	iv_rulepatternValidator=rulepatternValidator
	{ $current=$iv_rulepatternValidator.current.getText(); }
	EOF;

// Rule patternValidator
rulepatternValidator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='pattern'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPatternValidatorAccess().getPatternKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPatternValidatorAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getPatternValidatorAccess().getPATTERN_VALUEParserRuleCall_2());
		}
		this_PATTERN_VALUE_2=rulePATTERN_VALUE
		{
			$current.merge(this_PATTERN_VALUE_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPatternValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleminValidator
entryRuleminValidator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMinValidatorRule()); }
	iv_ruleminValidator=ruleminValidator
	{ $current=$iv_ruleminValidator.current.getText(); }
	EOF;

// Rule minValidator
ruleminValidator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='min'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinValidatorAccess().getMinKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinValidatorAccess().getLeftParenthesisKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getMinValidatorAccess().getINTTerminalRuleCall_2());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulemaxValidator
entryRulemaxValidator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMaxValidatorRule()); }
	iv_rulemaxValidator=rulemaxValidator
	{ $current=$iv_rulemaxValidator.current.getText(); }
	EOF;

// Rule maxValidator
rulemaxValidator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='max'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaxValidatorAccess().getMaxKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaxValidatorAccess().getLeftParenthesisKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getMaxValidatorAccess().getINTTerminalRuleCall_2());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMaxValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleminBytesValidator
entryRuleminBytesValidator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMinBytesValidatorRule()); }
	iv_ruleminBytesValidator=ruleminBytesValidator
	{ $current=$iv_ruleminBytesValidator.current.getText(); }
	EOF;

// Rule minBytesValidator
ruleminBytesValidator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='minbytes'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinBytesValidatorAccess().getMinbytesKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinBytesValidatorAccess().getLeftParenthesisKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getMinBytesValidatorAccess().getINTTerminalRuleCall_2());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMinBytesValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulemaxBytesValidator
entryRulemaxBytesValidator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaxBytesValidatorRule()); }
	iv_rulemaxBytesValidator=rulemaxBytesValidator
	{ $current=$iv_rulemaxBytesValidator.current; }
	EOF;

// Rule maxBytesValidator
rulemaxBytesValidator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='maxbytes'
		{
			newLeafNode(otherlv_0, grammarAccess.getMaxBytesValidatorAccess().getMaxbytesKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMaxBytesValidatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getMaxBytesValidatorAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaxBytesValidatorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMaxBytesValidatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleoption
entryRuleoption returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	iv_ruleoption=ruleoption
	{ $current=$iv_ruleoption.current; }
	EOF;

// Rule option
ruleoption returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getOptionAccess().getSettingOptionSettingParserRuleCall_0());
			}
			lv_setting_0_0=ruleoptionSetting
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getOptionRule());
				}
				set(
					$current,
					"setting",
					lv_setting_0_0,
					"mx.infotec.dads.kukulkan.Kukulkan.optionSetting");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleoptionSetting
entryRuleoptionSetting returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOptionSettingRule()); }
	iv_ruleoptionSetting=ruleoptionSetting
	{ $current=$iv_ruleoptionSetting.current.getText(); }
	EOF;

// Rule optionSetting
ruleoptionSetting returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getOptionSettingAccess().getDtoOptionParserRuleCall());
	}
	this_dtoOption_0=ruledtoOption
	{
		$current.merge(this_dtoOption_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuledtoOption
entryRuledtoOption returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDtoOptionRule()); }
	iv_ruledtoOption=ruledtoOption
	{ $current=$iv_ruledtoOption.current.getText(); }
	EOF;

// Rule dtoOption
ruledtoOption returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='dto'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtoOptionAccess().getDtoKeyword());
		}
	)?
;

// Entry rule entryRulePATTERN_VALUE
entryRulePATTERN_VALUE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPATTERN_VALUERule()); }
	iv_rulePATTERN_VALUE=rulePATTERN_VALUE
	{ $current=$iv_rulePATTERN_VALUE.current.getText(); }
	EOF;

// Rule PATTERN_VALUE
rulePATTERN_VALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='"'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPATTERN_VALUEAccess().getQuotationMarkKeyword_0());
			}
		)*
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPATTERN_VALUEAccess().getQuotationMarkKeyword_1());
		}
	)
;

// Entry rule entryRuleONE_TO_MANY
entryRuleONE_TO_MANY returns [String current=null]:
	{ newCompositeNode(grammarAccess.getONE_TO_MANYRule()); }
	iv_ruleONE_TO_MANY=ruleONE_TO_MANY
	{ $current=$iv_ruleONE_TO_MANY.current.getText(); }
	EOF;

// Rule ONE_TO_MANY
ruleONE_TO_MANY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='OneToMany'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getONE_TO_MANYAccess().getOneToManyKeyword());
	}
;

// Entry rule entryRuleMANY_TO_ONE
entryRuleMANY_TO_ONE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMANY_TO_ONERule()); }
	iv_ruleMANY_TO_ONE=ruleMANY_TO_ONE
	{ $current=$iv_ruleMANY_TO_ONE.current.getText(); }
	EOF;

// Rule MANY_TO_ONE
ruleMANY_TO_ONE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='ManyToOne'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMANY_TO_ONEAccess().getManyToOneKeyword());
	}
;

// Entry rule entryRuleONE_TO_ONE
entryRuleONE_TO_ONE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getONE_TO_ONERule()); }
	iv_ruleONE_TO_ONE=ruleONE_TO_ONE
	{ $current=$iv_ruleONE_TO_ONE.current.getText(); }
	EOF;

// Rule ONE_TO_ONE
ruleONE_TO_ONE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='OneToOne'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getONE_TO_ONEAccess().getOneToOneKeyword());
	}
;

// Entry rule entryRuleMANY_TO_MANY
entryRuleMANY_TO_MANY returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMANY_TO_MANYRule()); }
	iv_ruleMANY_TO_MANY=ruleMANY_TO_MANY
	{ $current=$iv_ruleMANY_TO_MANY.current.getText(); }
	EOF;

// Rule MANY_TO_MANY
ruleMANY_TO_MANY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='ManyToMany'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMANY_TO_MANYAccess().getManyToManyKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
