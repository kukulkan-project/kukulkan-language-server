/*
 * generated by Xtext 2.13.0
 */
package mx.infotec.dads.kukulkan.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KukulkanGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.domainModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cSettingsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSettingsOptionParserRuleCall_1_0 = (RuleCall)cSettingsAssignment_1.eContents().get(0);
		
		///**
		// * Domain Model Rule
		// */ domainModel:
		//	entities+=entity+
		//	| settings+=option;
		@Override public ParserRule getRule() { return rule; }
		
		//entities+=entity+ | settings+=option
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//entities+=entity+
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }
		
		//entity
		public RuleCall getEntitiesEntityParserRuleCall_0_0() { return cEntitiesEntityParserRuleCall_0_0; }
		
		//settings+=option
		public Assignment getSettingsAssignment_1() { return cSettingsAssignment_1; }
		
		//option
		public RuleCall getSettingsOptionParserRuleCall_1_0() { return cSettingsOptionParserRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTableNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTableNameIDTerminalRuleCall_2_1_0 = (RuleCall)cTableNameAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cFieldsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cFieldsEntityFieldParserRuleCall_3_1_0_0 = (RuleCall)cFieldsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cFieldsEntityFieldParserRuleCall_3_1_1_1_0 = (RuleCall)cFieldsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		///** 
		// * Entity Rule
		// *  
		// */ entity:
		//	'entity' name=ID ('(' tableName=ID ')')? ('{' (fields+=entityField (','? fields+=entityField)*)? '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID ('(' tableName=ID ')')? ('{' (fields+=entityField (','? fields+=entityField)*)? '}')?
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' tableName=ID ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//tableName=ID
		public Assignment getTableNameAssignment_2_1() { return cTableNameAssignment_2_1; }
		
		//ID
		public RuleCall getTableNameIDTerminalRuleCall_2_1_0() { return cTableNameIDTerminalRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//('{' (fields+=entityField (','? fields+=entityField)*)? '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(fields+=entityField (','? fields+=entityField)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//fields+=entityField
		public Assignment getFieldsAssignment_3_1_0() { return cFieldsAssignment_3_1_0; }
		
		//entityField
		public RuleCall getFieldsEntityFieldParserRuleCall_3_1_0_0() { return cFieldsEntityFieldParserRuleCall_3_1_0_0; }
		
		//(','? fields+=entityField)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','?
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//fields+=entityField
		public Assignment getFieldsAssignment_3_1_1_1() { return cFieldsAssignment_3_1_1_1; }
		
		//entityField
		public RuleCall getFieldsEntityFieldParserRuleCall_3_1_1_1_0() { return cFieldsEntityFieldParserRuleCall_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class EntityFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.entityField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeFieldTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		///** 
		// * Entity Field Rule
		// *  
		// */ entityField:
		//	id=ID type=fieldType;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID type=fieldType
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//type=fieldType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//fieldType
		public RuleCall getTypeFieldTypeParserRuleCall_1_0() { return cTypeFieldTypeParserRuleCall_1_0; }
	}
	public class FieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.fieldType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringFieldTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericFieldTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanFieldTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateFieldTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBlobFieldTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEntityTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///** 
		// * Field Type Rule
		// *  
		// */ fieldType:
		//	stringFieldType
		//	| numericFieldType
		//	| booleanFieldType
		//	| dateFieldType
		//	| blobFieldType
		//	| entityType;
		@Override public ParserRule getRule() { return rule; }
		
		//stringFieldType | numericFieldType | booleanFieldType | dateFieldType | blobFieldType | entityType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//stringFieldType
		public RuleCall getStringFieldTypeParserRuleCall_0() { return cStringFieldTypeParserRuleCall_0; }
		
		//numericFieldType
		public RuleCall getNumericFieldTypeParserRuleCall_1() { return cNumericFieldTypeParserRuleCall_1; }
		
		//booleanFieldType
		public RuleCall getBooleanFieldTypeParserRuleCall_2() { return cBooleanFieldTypeParserRuleCall_2; }
		
		//dateFieldType
		public RuleCall getDateFieldTypeParserRuleCall_3() { return cDateFieldTypeParserRuleCall_3; }
		
		//blobFieldType
		public RuleCall getBlobFieldTypeParserRuleCall_4() { return cBlobFieldTypeParserRuleCall_4; }
		
		//entityType
		public RuleCall getEntityTypeParserRuleCall_5() { return cEntityTypeParserRuleCall_5; }
	}
	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.entityType");
		private final RuleCall cEntityParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///** 
		// * Entity Type Rule
		// *  
		// */ entityType:
		//	entity;
		@Override public ParserRule getRule() { return rule; }
		
		//entity
		public RuleCall getEntityParserRuleCall() { return cEntityParserRuleCall; }
	}
	public class StringFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.stringFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameStringTypeParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintsStringValidatorsParserRuleCall_1_0 = (RuleCall)cConstraintsAssignment_1.eContents().get(0);
		
		///** 
		// * String Field Type Rule
		// *  
		// */ stringFieldType:
		//	name=stringType constraints+=stringValidators*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=stringType constraints+=stringValidators*
		public Group getGroup() { return cGroup; }
		
		//name=stringType
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//stringType
		public RuleCall getNameStringTypeParserRuleCall_0_0() { return cNameStringTypeParserRuleCall_0_0; }
		
		//constraints+=stringValidators*
		public Assignment getConstraintsAssignment_1() { return cConstraintsAssignment_1; }
		
		//stringValidators
		public RuleCall getConstraintsStringValidatorsParserRuleCall_1_0() { return cConstraintsStringValidatorsParserRuleCall_1_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.stringType");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * String Type Rule
		// *  
		// */ stringType:
		//	'String';
		@Override public ParserRule getRule() { return rule; }
		
		//'String'
		public Keyword getStringKeyword() { return cStringKeyword; }
	}
	public class NumericFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.numericFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNumericTypesParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintsNumericValidatorsParserRuleCall_1_0 = (RuleCall)cConstraintsAssignment_1.eContents().get(0);
		
		///** 
		// * Numeric Field Type Rule
		// *  
		// */ numericFieldType:
		//	name=numericTypes constraints+=numericValidators*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=numericTypes constraints+=numericValidators*
		public Group getGroup() { return cGroup; }
		
		//name=numericTypes
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//numericTypes
		public RuleCall getNameNumericTypesParserRuleCall_0_0() { return cNameNumericTypesParserRuleCall_0_0; }
		
		//constraints+=numericValidators*
		public Assignment getConstraintsAssignment_1() { return cConstraintsAssignment_1; }
		
		//numericValidators
		public RuleCall getConstraintsNumericValidatorsParserRuleCall_1_0() { return cConstraintsNumericValidatorsParserRuleCall_1_0; }
	}
	public class NumericTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.numericTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLONGParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBIG_DECIMALParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFLOATParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDOUBLEParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///** 
		// * Numeric Types Rule
		// *  
		// */ numericTypes:
		//	INTEGER
		//	| LONG
		//	| BIG_DECIMAL
		//	| FLOAT
		//	| DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//INTEGER | LONG | BIG_DECIMAL | FLOAT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTEGER
		public RuleCall getINTEGERParserRuleCall_0() { return cINTEGERParserRuleCall_0; }
		
		//LONG
		public RuleCall getLONGParserRuleCall_1() { return cLONGParserRuleCall_1; }
		
		//BIG_DECIMAL
		public RuleCall getBIG_DECIMALParserRuleCall_2() { return cBIG_DECIMALParserRuleCall_2; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_3() { return cFLOATParserRuleCall_3; }
		
		//DOUBLE
		public RuleCall getDOUBLEParserRuleCall_4() { return cDOUBLEParserRuleCall_4; }
	}
	public class INTEGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.INTEGER");
		private final Keyword cIntegerKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * INTEGER Token
		// *  
		// */ INTEGER:
		//	'Integer';
		@Override public ParserRule getRule() { return rule; }
		
		//'Integer'
		public Keyword getIntegerKeyword() { return cIntegerKeyword; }
	}
	public class LONGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.LONG");
		private final Keyword cLongKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * LONG Token
		// *  
		// */ LONG:
		//	'Long';
		@Override public ParserRule getRule() { return rule; }
		
		//'Long'
		public Keyword getLongKeyword() { return cLongKeyword; }
	}
	public class BIG_DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.BIG_DECIMAL");
		private final Keyword cBigDecimalKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * BIG_DECIMAL Token
		// *  
		// */ BIG_DECIMAL:
		//	'BigDecimal';
		@Override public ParserRule getRule() { return rule; }
		
		//'BigDecimal'
		public Keyword getBigDecimalKeyword() { return cBigDecimalKeyword; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.FLOAT");
		private final Keyword cFloatKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * FLOAT Token
		// *  
		// */ FLOAT:
		//	'Float';
		@Override public ParserRule getRule() { return rule; }
		
		//'Float'
		public Keyword getFloatKeyword() { return cFloatKeyword; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.DOUBLE");
		private final Keyword cDoubleKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * DOUBLE Token
		// *  
		// */ DOUBLE:
		//	'Double';
		@Override public ParserRule getRule() { return rule; }
		
		//'Double'
		public Keyword getDoubleKeyword() { return cDoubleKeyword; }
	}
	public class BooleanFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.booleanFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameBOOLEAN_TYPEParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_1_0 = (RuleCall)cRequiredAssignment_1.eContents().get(0);
		
		///** 
		// * Boolean Field Type Token
		// *  
		// */ booleanFieldType:
		//	name=BOOLEAN_TYPE required=requiredValidator*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=BOOLEAN_TYPE required=requiredValidator*
		public Group getGroup() { return cGroup; }
		
		//name=BOOLEAN_TYPE
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//BOOLEAN_TYPE
		public RuleCall getNameBOOLEAN_TYPEParserRuleCall_0_0() { return cNameBOOLEAN_TYPEParserRuleCall_0_0; }
		
		//required=requiredValidator*
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_1_0() { return cRequiredRequiredValidatorParserRuleCall_1_0; }
	}
	public class BOOLEAN_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.BOOLEAN_TYPE");
		private final Keyword cBooleanKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * BOOLEAN_TYPE Token
		// *  
		// */ BOOLEAN_TYPE:
		//	'Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//'Boolean'
		public Keyword getBooleanKeyword() { return cBooleanKeyword; }
	}
	public class DateFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.dateFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDateTypesParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cRequiredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_1_0 = (RuleCall)cRequiredAssignment_1.eContents().get(0);
		
		///** 
		// * Date Field Type Rule
		// *  
		// */ dateFieldType:
		//	type=dateTypes required=requiredValidator?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=dateTypes required=requiredValidator?
		public Group getGroup() { return cGroup; }
		
		//type=dateTypes
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//dateTypes
		public RuleCall getTypeDateTypesParserRuleCall_0_0() { return cTypeDateTypesParserRuleCall_0_0; }
		
		//required=requiredValidator?
		public Assignment getRequiredAssignment_1() { return cRequiredAssignment_1; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_1_0() { return cRequiredRequiredValidatorParserRuleCall_1_0; }
	}
	public class DateTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.dateTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDATEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLOCAL_DATEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cZONED_DATETIMEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cINSTANTParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///** 
		// * Date Types Rule
		// *  
		// */ dateTypes:
		//	DATE
		//	| LOCAL_DATE
		//	| ZONED_DATETIME
		//	| INSTANT;
		@Override public ParserRule getRule() { return rule; }
		
		//DATE | LOCAL_DATE | ZONED_DATETIME | INSTANT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DATE
		public RuleCall getDATEParserRuleCall_0() { return cDATEParserRuleCall_0; }
		
		//LOCAL_DATE
		public RuleCall getLOCAL_DATEParserRuleCall_1() { return cLOCAL_DATEParserRuleCall_1; }
		
		//ZONED_DATETIME
		public RuleCall getZONED_DATETIMEParserRuleCall_2() { return cZONED_DATETIMEParserRuleCall_2; }
		
		//INSTANT
		public RuleCall getINSTANTParserRuleCall_3() { return cINSTANTParserRuleCall_3; }
	}
	public class DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.DATE");
		private final Keyword cDateKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * DATE Token
		// *  
		// */ DATE:
		//	'Date';
		@Override public ParserRule getRule() { return rule; }
		
		//'Date'
		public Keyword getDateKeyword() { return cDateKeyword; }
	}
	public class LOCAL_DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.LOCAL_DATE");
		private final Keyword cLocalDateKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * LOCAL_DATE Token
		// *  
		// */ LOCAL_DATE:
		//	'LocalDate';
		@Override public ParserRule getRule() { return rule; }
		
		//'LocalDate'
		public Keyword getLocalDateKeyword() { return cLocalDateKeyword; }
	}
	public class ZONED_DATETIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ZONED_DATETIME");
		private final Keyword cZonedDateTimeKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * ZONED_DATETIME Token
		// *  
		// */ ZONED_DATETIME:
		//	'ZonedDateTime';
		@Override public ParserRule getRule() { return rule; }
		
		//'ZonedDateTime'
		public Keyword getZonedDateTimeKeyword() { return cZonedDateTimeKeyword; }
	}
	public class INSTANTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.INSTANT");
		private final Keyword cInstantKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * INSTANT Token
		// *  
		// */ INSTANT:
		//	'Instant';
		@Override public ParserRule getRule() { return rule; }
		
		//'Instant'
		public Keyword getInstantKeyword() { return cInstantKeyword; }
	}
	public class BlobFieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.blobFieldType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameBlobTypesParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintsBlobValidatorsParserRuleCall_1_0 = (RuleCall)cConstraintsAssignment_1.eContents().get(0);
		
		///** 
		// * Blob Field Type Rule
		// *  
		// */ blobFieldType:
		//	name=blobTypes constraints+=blobValidators*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=blobTypes constraints+=blobValidators*
		public Group getGroup() { return cGroup; }
		
		//name=blobTypes
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//blobTypes
		public RuleCall getNameBlobTypesParserRuleCall_0_0() { return cNameBlobTypesParserRuleCall_0_0; }
		
		//constraints+=blobValidators*
		public Assignment getConstraintsAssignment_1() { return cConstraintsAssignment_1; }
		
		//blobValidators
		public RuleCall getConstraintsBlobValidatorsParserRuleCall_1_0() { return cConstraintsBlobValidatorsParserRuleCall_1_0; }
	}
	public class BlobTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.blobTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBLOBParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANY_BLOBParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIMAGE_BLOBParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTEXT_BLOBParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///** 
		// * Blob Types Rule
		// *  
		// */ blobTypes:
		//	BLOB
		//	| ANY_BLOB
		//	| IMAGE_BLOB
		//	| TEXT_BLOB;
		@Override public ParserRule getRule() { return rule; }
		
		//BLOB | ANY_BLOB | IMAGE_BLOB | TEXT_BLOB
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BLOB
		public RuleCall getBLOBParserRuleCall_0() { return cBLOBParserRuleCall_0; }
		
		//ANY_BLOB
		public RuleCall getANY_BLOBParserRuleCall_1() { return cANY_BLOBParserRuleCall_1; }
		
		//IMAGE_BLOB
		public RuleCall getIMAGE_BLOBParserRuleCall_2() { return cIMAGE_BLOBParserRuleCall_2; }
		
		//TEXT_BLOB
		public RuleCall getTEXT_BLOBParserRuleCall_3() { return cTEXT_BLOBParserRuleCall_3; }
	}
	public class BLOBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.BLOB");
		private final Keyword cBlobKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * BLOB Token
		// *  
		// */ BLOB:
		//	'Blob';
		@Override public ParserRule getRule() { return rule; }
		
		//'Blob'
		public Keyword getBlobKeyword() { return cBlobKeyword; }
	}
	public class ANY_BLOBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ANY_BLOB");
		private final Keyword cAnyBlobKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * ANY_BLOB Token
		// *  
		// */ ANY_BLOB:
		//	'AnyBlob';
		@Override public ParserRule getRule() { return rule; }
		
		//'AnyBlob'
		public Keyword getAnyBlobKeyword() { return cAnyBlobKeyword; }
	}
	public class IMAGE_BLOBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.IMAGE_BLOB");
		private final Keyword cImageBlobKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * IMAGE_BLOB Token
		// *  
		// */ IMAGE_BLOB:
		//	'ImageBlob';
		@Override public ParserRule getRule() { return rule; }
		
		//'ImageBlob'
		public Keyword getImageBlobKeyword() { return cImageBlobKeyword; }
	}
	public class TEXT_BLOBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.TEXT_BLOB");
		private final Keyword cTextBlobKeyword = (Keyword)rule.eContents().get(1);
		
		///** 
		// * TEXT_BLOB Token
		// *  
		// */ TEXT_BLOB:
		//	'TextBlob';
		@Override public ParserRule getRule() { return rule; }
		
		//'TextBlob'
		public Keyword getTextBlobKeyword() { return cTextBlobKeyword; }
	}
	public class StringValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.stringValidators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinLenghtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMinLenghtMinLengthValidatorParserRuleCall_1_0 = (RuleCall)cMinLenghtAssignment_1.eContents().get(0);
		private final Assignment cMaxLenghtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMaxLenghtMaxLengthValidatorParserRuleCall_2_0 = (RuleCall)cMaxLenghtAssignment_2.eContents().get(0);
		private final Assignment cPatternAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cPatternPatternValidatorParserRuleCall_3_0 = (RuleCall)cPatternAssignment_3.eContents().get(0);
		
		///* =========================================================================
		// * VALIDATOR
		// * ========================================================================= */ stringValidators:
		//	required=requiredValidator
		//	| minLenght=minLengthValidator
		//	| maxLenght=maxLengthValidator
		//	| pattern=patternValidator;
		@Override public ParserRule getRule() { return rule; }
		
		//required=requiredValidator | minLenght=minLengthValidator | maxLenght=maxLengthValidator | pattern=patternValidator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//required=requiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_0_0() { return cRequiredRequiredValidatorParserRuleCall_0_0; }
		
		//minLenght=minLengthValidator
		public Assignment getMinLenghtAssignment_1() { return cMinLenghtAssignment_1; }
		
		//minLengthValidator
		public RuleCall getMinLenghtMinLengthValidatorParserRuleCall_1_0() { return cMinLenghtMinLengthValidatorParserRuleCall_1_0; }
		
		//maxLenght=maxLengthValidator
		public Assignment getMaxLenghtAssignment_2() { return cMaxLenghtAssignment_2; }
		
		//maxLengthValidator
		public RuleCall getMaxLenghtMaxLengthValidatorParserRuleCall_2_0() { return cMaxLenghtMaxLengthValidatorParserRuleCall_2_0; }
		
		//pattern=patternValidator
		public Assignment getPatternAssignment_3() { return cPatternAssignment_3; }
		
		//patternValidator
		public RuleCall getPatternPatternValidatorParserRuleCall_3_0() { return cPatternPatternValidatorParserRuleCall_3_0; }
	}
	public class NumericValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.numericValidators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMinValueMinValidatorParserRuleCall_1_0 = (RuleCall)cMinValueAssignment_1.eContents().get(0);
		private final Assignment cMaxValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMaxValueMaxValidatorParserRuleCall_2_0 = (RuleCall)cMaxValueAssignment_2.eContents().get(0);
		
		//numericValidators:
		//	required=requiredValidator
		//	| minValue=minValidator
		//	| maxValue=maxValidator;
		@Override public ParserRule getRule() { return rule; }
		
		//required=requiredValidator | minValue=minValidator | maxValue=maxValidator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//required=requiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_0_0() { return cRequiredRequiredValidatorParserRuleCall_0_0; }
		
		//minValue=minValidator
		public Assignment getMinValueAssignment_1() { return cMinValueAssignment_1; }
		
		//minValidator
		public RuleCall getMinValueMinValidatorParserRuleCall_1_0() { return cMinValueMinValidatorParserRuleCall_1_0; }
		
		//maxValue=maxValidator
		public Assignment getMaxValueAssignment_2() { return cMaxValueAssignment_2; }
		
		//maxValidator
		public RuleCall getMaxValueMaxValidatorParserRuleCall_2_0() { return cMaxValueMaxValidatorParserRuleCall_2_0; }
	}
	public class BlobValidatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.blobValidators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredRequiredValidatorParserRuleCall_0_0 = (RuleCall)cRequiredAssignment_0.eContents().get(0);
		private final Assignment cMinBytesValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMinBytesValueMinBytesValidatorParserRuleCall_1_0 = (RuleCall)cMinBytesValueAssignment_1.eContents().get(0);
		private final Assignment cMaxBytesValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMaxBytesValueMaxBytesValidatorParserRuleCall_2_0 = (RuleCall)cMaxBytesValueAssignment_2.eContents().get(0);
		
		//blobValidators:
		//	required=requiredValidator
		//	| minBytesValue=minBytesValidator
		//	| maxBytesValue=maxBytesValidator;
		@Override public ParserRule getRule() { return rule; }
		
		//required=requiredValidator | minBytesValue=minBytesValidator | maxBytesValue=maxBytesValidator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//required=requiredValidator
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }
		
		//requiredValidator
		public RuleCall getRequiredRequiredValidatorParserRuleCall_0_0() { return cRequiredRequiredValidatorParserRuleCall_0_0; }
		
		//minBytesValue=minBytesValidator
		public Assignment getMinBytesValueAssignment_1() { return cMinBytesValueAssignment_1; }
		
		//minBytesValidator
		public RuleCall getMinBytesValueMinBytesValidatorParserRuleCall_1_0() { return cMinBytesValueMinBytesValidatorParserRuleCall_1_0; }
		
		//maxBytesValue=maxBytesValidator
		public Assignment getMaxBytesValueAssignment_2() { return cMaxBytesValueAssignment_2; }
		
		//maxBytesValidator
		public RuleCall getMaxBytesValueMaxBytesValidatorParserRuleCall_2_0() { return cMaxBytesValueMaxBytesValidatorParserRuleCall_2_0; }
	}
	public class RequiredValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.requiredValidator");
		private final Keyword cRequiredKeyword = (Keyword)rule.eContents().get(1);
		
		//requiredValidator:
		//	'required';
		@Override public ParserRule getRule() { return rule; }
		
		//'required'
		public Keyword getRequiredKeyword() { return cRequiredKeyword; }
	}
	public class MinLengthValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.minLengthValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinlengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//minLengthValidator:
		//	'minlength' '(' INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'minlength' '(' INT ')'
		public Group getGroup() { return cGroup; }
		
		//'minlength'
		public Keyword getMinlengthKeyword_0() { return cMinlengthKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MaxLengthValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.maxLengthValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxlengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//maxLengthValidator:
		//	'maxlength' '(' INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'maxlength' '(' INT ')'
		public Group getGroup() { return cGroup; }
		
		//'maxlength'
		public Keyword getMaxlengthKeyword_0() { return cMaxlengthKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PatternValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.patternValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPATTERN_VALUEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//patternValidator:
		//	'pattern' '(' PATTERN_VALUE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'pattern' '(' PATTERN_VALUE ')'
		public Group getGroup() { return cGroup; }
		
		//'pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//PATTERN_VALUE
		public RuleCall getPATTERN_VALUEParserRuleCall_2() { return cPATTERN_VALUEParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MinValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.minValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//minValidator:
		//	'min' '(' INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'min' '(' INT ')'
		public Group getGroup() { return cGroup; }
		
		//'min'
		public Keyword getMinKeyword_0() { return cMinKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MaxValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.maxValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//maxValidator:
		//	'max' '(' INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'max' '(' INT ')'
		public Group getGroup() { return cGroup; }
		
		//'max'
		public Keyword getMaxKeyword_0() { return cMaxKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MinBytesValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.minBytesValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinbytesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//minBytesValidator:
		//	'minbytes' '(' INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'minbytes' '(' INT ')'
		public Group getGroup() { return cGroup; }
		
		//'minbytes'
		public Keyword getMinbytesKeyword_0() { return cMinbytesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MaxBytesValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.maxBytesValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxbytesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//maxBytesValidator:
		//	'maxbytes' '(' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'maxbytes' '(' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'maxbytes'
		public Keyword getMaxbytesKeyword_0() { return cMaxbytesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cONE_TO_MANYParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMANY_TO_ONEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cONE_TO_ONEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMANY_TO_MANYParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//cardinality:
		//	ONE_TO_MANY
		//	| MANY_TO_ONE
		//	| ONE_TO_ONE
		//	| MANY_TO_MANY;
		@Override public ParserRule getRule() { return rule; }
		
		//ONE_TO_MANY | MANY_TO_ONE | ONE_TO_ONE | MANY_TO_MANY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ONE_TO_MANY
		public RuleCall getONE_TO_MANYParserRuleCall_0() { return cONE_TO_MANYParserRuleCall_0; }
		
		//MANY_TO_ONE
		public RuleCall getMANY_TO_ONEParserRuleCall_1() { return cMANY_TO_ONEParserRuleCall_1; }
		
		//ONE_TO_ONE
		public RuleCall getONE_TO_ONEParserRuleCall_2() { return cONE_TO_ONEParserRuleCall_2; }
		
		//MANY_TO_MANY
		public RuleCall getMANY_TO_MANYParserRuleCall_3() { return cMANY_TO_MANYParserRuleCall_3; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.option");
		private final Assignment cSettingAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSettingOptionSettingParserRuleCall_0 = (RuleCall)cSettingAssignment.eContents().get(0);
		
		///* =========================================================================
		// * OPTION 
		// * ========================================================================= */ option:
		//	setting=optionSetting;
		@Override public ParserRule getRule() { return rule; }
		
		//setting=optionSetting
		public Assignment getSettingAssignment() { return cSettingAssignment; }
		
		//optionSetting
		public RuleCall getSettingOptionSettingParserRuleCall_0() { return cSettingOptionSettingParserRuleCall_0; }
	}
	public class OptionSettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.optionSetting");
		private final RuleCall cDtoOptionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//optionSetting:
		//	dtoOption;
		@Override public ParserRule getRule() { return rule; }
		
		//dtoOption
		public RuleCall getDtoOptionParserRuleCall() { return cDtoOptionParserRuleCall; }
	}
	public class DtoOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.dtoOption");
		private final Keyword cDtoKeyword = (Keyword)rule.eContents().get(1);
		
		///* =========================================================================
		// * DTO OPTION 
		// * ========================================================================= */ dtoOption:
		//	'dto'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'dto'?
		public Keyword getDtoKeyword() { return cDtoKeyword; }
	}
	public class DtoTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.dtoType");
		private final Keyword cMapstructKeyword = (Keyword)rule.eContents().get(1);
		
		//dtoType:
		//	'mapstruct';
		@Override public ParserRule getRule() { return rule; }
		
		//'mapstruct'
		public Keyword getMapstructKeyword() { return cMapstructKeyword; }
	}
	public class PATTERN_VALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.PATTERN_VALUE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PATTERN_VALUE:
		//	'"'* '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"'* '"'
		public Group getGroup() { return cGroup; }
		
		//'"'*
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1() { return cQuotationMarkKeyword_1; }
	}
	public class ONE_TO_MANYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ONE_TO_MANY");
		private final Keyword cOneToManyKeyword = (Keyword)rule.eContents().get(1);
		
		//ONE_TO_MANY:
		//	'OneToMany';
		@Override public ParserRule getRule() { return rule; }
		
		//'OneToMany'
		public Keyword getOneToManyKeyword() { return cOneToManyKeyword; }
	}
	public class MANY_TO_ONEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.MANY_TO_ONE");
		private final Keyword cManyToOneKeyword = (Keyword)rule.eContents().get(1);
		
		//MANY_TO_ONE:
		//	'ManyToOne';
		@Override public ParserRule getRule() { return rule; }
		
		//'ManyToOne'
		public Keyword getManyToOneKeyword() { return cManyToOneKeyword; }
	}
	public class ONE_TO_ONEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.ONE_TO_ONE");
		private final Keyword cOneToOneKeyword = (Keyword)rule.eContents().get(1);
		
		//ONE_TO_ONE:
		//	'OneToOne';
		@Override public ParserRule getRule() { return rule; }
		
		//'OneToOne'
		public Keyword getOneToOneKeyword() { return cOneToOneKeyword; }
	}
	public class MANY_TO_MANYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.infotec.dads.kukulkan.Kukulkan.MANY_TO_MANY");
		private final Keyword cManyToManyKeyword = (Keyword)rule.eContents().get(1);
		
		//MANY_TO_MANY:
		//	'ManyToMany';
		@Override public ParserRule getRule() { return rule; }
		
		//'ManyToMany'
		public Keyword getManyToManyKeyword() { return cManyToManyKeyword; }
	}
	
	
	private final DomainModelElements pDomainModel;
	private final EntityElements pEntity;
	private final EntityFieldElements pEntityField;
	private final FieldTypeElements pFieldType;
	private final EntityTypeElements pEntityType;
	private final StringFieldTypeElements pStringFieldType;
	private final StringTypeElements pStringType;
	private final NumericFieldTypeElements pNumericFieldType;
	private final NumericTypesElements pNumericTypes;
	private final INTEGERElements pINTEGER;
	private final LONGElements pLONG;
	private final BIG_DECIMALElements pBIG_DECIMAL;
	private final FLOATElements pFLOAT;
	private final DOUBLEElements pDOUBLE;
	private final BooleanFieldTypeElements pBooleanFieldType;
	private final BOOLEAN_TYPEElements pBOOLEAN_TYPE;
	private final DateFieldTypeElements pDateFieldType;
	private final DateTypesElements pDateTypes;
	private final DATEElements pDATE;
	private final LOCAL_DATEElements pLOCAL_DATE;
	private final ZONED_DATETIMEElements pZONED_DATETIME;
	private final INSTANTElements pINSTANT;
	private final BlobFieldTypeElements pBlobFieldType;
	private final BlobTypesElements pBlobTypes;
	private final BLOBElements pBLOB;
	private final ANY_BLOBElements pANY_BLOB;
	private final IMAGE_BLOBElements pIMAGE_BLOB;
	private final TEXT_BLOBElements pTEXT_BLOB;
	private final StringValidatorsElements pStringValidators;
	private final NumericValidatorsElements pNumericValidators;
	private final BlobValidatorsElements pBlobValidators;
	private final RequiredValidatorElements pRequiredValidator;
	private final MinLengthValidatorElements pMinLengthValidator;
	private final MaxLengthValidatorElements pMaxLengthValidator;
	private final PatternValidatorElements pPatternValidator;
	private final MinValidatorElements pMinValidator;
	private final MaxValidatorElements pMaxValidator;
	private final MinBytesValidatorElements pMinBytesValidator;
	private final MaxBytesValidatorElements pMaxBytesValidator;
	private final CardinalityElements pCardinality;
	private final OptionElements pOption;
	private final OptionSettingElements pOptionSetting;
	private final DtoOptionElements pDtoOption;
	private final DtoTypeElements pDtoType;
	private final PATTERN_VALUEElements pPATTERN_VALUE;
	private final ONE_TO_MANYElements pONE_TO_MANY;
	private final MANY_TO_ONEElements pMANY_TO_ONE;
	private final ONE_TO_ONEElements pONE_TO_ONE;
	private final MANY_TO_MANYElements pMANY_TO_MANY;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KukulkanGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainModel = new DomainModelElements();
		this.pEntity = new EntityElements();
		this.pEntityField = new EntityFieldElements();
		this.pFieldType = new FieldTypeElements();
		this.pEntityType = new EntityTypeElements();
		this.pStringFieldType = new StringFieldTypeElements();
		this.pStringType = new StringTypeElements();
		this.pNumericFieldType = new NumericFieldTypeElements();
		this.pNumericTypes = new NumericTypesElements();
		this.pINTEGER = new INTEGERElements();
		this.pLONG = new LONGElements();
		this.pBIG_DECIMAL = new BIG_DECIMALElements();
		this.pFLOAT = new FLOATElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pBooleanFieldType = new BooleanFieldTypeElements();
		this.pBOOLEAN_TYPE = new BOOLEAN_TYPEElements();
		this.pDateFieldType = new DateFieldTypeElements();
		this.pDateTypes = new DateTypesElements();
		this.pDATE = new DATEElements();
		this.pLOCAL_DATE = new LOCAL_DATEElements();
		this.pZONED_DATETIME = new ZONED_DATETIMEElements();
		this.pINSTANT = new INSTANTElements();
		this.pBlobFieldType = new BlobFieldTypeElements();
		this.pBlobTypes = new BlobTypesElements();
		this.pBLOB = new BLOBElements();
		this.pANY_BLOB = new ANY_BLOBElements();
		this.pIMAGE_BLOB = new IMAGE_BLOBElements();
		this.pTEXT_BLOB = new TEXT_BLOBElements();
		this.pStringValidators = new StringValidatorsElements();
		this.pNumericValidators = new NumericValidatorsElements();
		this.pBlobValidators = new BlobValidatorsElements();
		this.pRequiredValidator = new RequiredValidatorElements();
		this.pMinLengthValidator = new MinLengthValidatorElements();
		this.pMaxLengthValidator = new MaxLengthValidatorElements();
		this.pPatternValidator = new PatternValidatorElements();
		this.pMinValidator = new MinValidatorElements();
		this.pMaxValidator = new MaxValidatorElements();
		this.pMinBytesValidator = new MinBytesValidatorElements();
		this.pMaxBytesValidator = new MaxBytesValidatorElements();
		this.pCardinality = new CardinalityElements();
		this.pOption = new OptionElements();
		this.pOptionSetting = new OptionSettingElements();
		this.pDtoOption = new DtoOptionElements();
		this.pDtoType = new DtoTypeElements();
		this.pPATTERN_VALUE = new PATTERN_VALUEElements();
		this.pONE_TO_MANY = new ONE_TO_MANYElements();
		this.pMANY_TO_ONE = new MANY_TO_ONEElements();
		this.pONE_TO_ONE = new ONE_TO_ONEElements();
		this.pMANY_TO_MANY = new MANY_TO_MANYElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mx.infotec.dads.kukulkan.Kukulkan".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * Domain Model Rule
	// */ domainModel:
	//	entities+=entity+
	//	| settings+=option;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	///** 
	// * Entity Rule
	// *  
	// */ entity:
	//	'entity' name=ID ('(' tableName=ID ')')? ('{' (fields+=entityField (','? fields+=entityField)*)? '}')?;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	///** 
	// * Entity Field Rule
	// *  
	// */ entityField:
	//	id=ID type=fieldType;
	public EntityFieldElements getEntityFieldAccess() {
		return pEntityField;
	}
	
	public ParserRule getEntityFieldRule() {
		return getEntityFieldAccess().getRule();
	}
	
	///** 
	// * Field Type Rule
	// *  
	// */ fieldType:
	//	stringFieldType
	//	| numericFieldType
	//	| booleanFieldType
	//	| dateFieldType
	//	| blobFieldType
	//	| entityType;
	public FieldTypeElements getFieldTypeAccess() {
		return pFieldType;
	}
	
	public ParserRule getFieldTypeRule() {
		return getFieldTypeAccess().getRule();
	}
	
	///** 
	// * Entity Type Rule
	// *  
	// */ entityType:
	//	entity;
	public EntityTypeElements getEntityTypeAccess() {
		return pEntityType;
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}
	
	///** 
	// * String Field Type Rule
	// *  
	// */ stringFieldType:
	//	name=stringType constraints+=stringValidators*;
	public StringFieldTypeElements getStringFieldTypeAccess() {
		return pStringFieldType;
	}
	
	public ParserRule getStringFieldTypeRule() {
		return getStringFieldTypeAccess().getRule();
	}
	
	///** 
	// * String Type Rule
	// *  
	// */ stringType:
	//	'String';
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	///** 
	// * Numeric Field Type Rule
	// *  
	// */ numericFieldType:
	//	name=numericTypes constraints+=numericValidators*;
	public NumericFieldTypeElements getNumericFieldTypeAccess() {
		return pNumericFieldType;
	}
	
	public ParserRule getNumericFieldTypeRule() {
		return getNumericFieldTypeAccess().getRule();
	}
	
	///** 
	// * Numeric Types Rule
	// *  
	// */ numericTypes:
	//	INTEGER
	//	| LONG
	//	| BIG_DECIMAL
	//	| FLOAT
	//	| DOUBLE;
	public NumericTypesElements getNumericTypesAccess() {
		return pNumericTypes;
	}
	
	public ParserRule getNumericTypesRule() {
		return getNumericTypesAccess().getRule();
	}
	
	///** 
	// * INTEGER Token
	// *  
	// */ INTEGER:
	//	'Integer';
	public INTEGERElements getINTEGERAccess() {
		return pINTEGER;
	}
	
	public ParserRule getINTEGERRule() {
		return getINTEGERAccess().getRule();
	}
	
	///** 
	// * LONG Token
	// *  
	// */ LONG:
	//	'Long';
	public LONGElements getLONGAccess() {
		return pLONG;
	}
	
	public ParserRule getLONGRule() {
		return getLONGAccess().getRule();
	}
	
	///** 
	// * BIG_DECIMAL Token
	// *  
	// */ BIG_DECIMAL:
	//	'BigDecimal';
	public BIG_DECIMALElements getBIG_DECIMALAccess() {
		return pBIG_DECIMAL;
	}
	
	public ParserRule getBIG_DECIMALRule() {
		return getBIG_DECIMALAccess().getRule();
	}
	
	///** 
	// * FLOAT Token
	// *  
	// */ FLOAT:
	//	'Float';
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	///** 
	// * DOUBLE Token
	// *  
	// */ DOUBLE:
	//	'Double';
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	///** 
	// * Boolean Field Type Token
	// *  
	// */ booleanFieldType:
	//	name=BOOLEAN_TYPE required=requiredValidator*;
	public BooleanFieldTypeElements getBooleanFieldTypeAccess() {
		return pBooleanFieldType;
	}
	
	public ParserRule getBooleanFieldTypeRule() {
		return getBooleanFieldTypeAccess().getRule();
	}
	
	///** 
	// * BOOLEAN_TYPE Token
	// *  
	// */ BOOLEAN_TYPE:
	//	'Boolean';
	public BOOLEAN_TYPEElements getBOOLEAN_TYPEAccess() {
		return pBOOLEAN_TYPE;
	}
	
	public ParserRule getBOOLEAN_TYPERule() {
		return getBOOLEAN_TYPEAccess().getRule();
	}
	
	///** 
	// * Date Field Type Rule
	// *  
	// */ dateFieldType:
	//	type=dateTypes required=requiredValidator?;
	public DateFieldTypeElements getDateFieldTypeAccess() {
		return pDateFieldType;
	}
	
	public ParserRule getDateFieldTypeRule() {
		return getDateFieldTypeAccess().getRule();
	}
	
	///** 
	// * Date Types Rule
	// *  
	// */ dateTypes:
	//	DATE
	//	| LOCAL_DATE
	//	| ZONED_DATETIME
	//	| INSTANT;
	public DateTypesElements getDateTypesAccess() {
		return pDateTypes;
	}
	
	public ParserRule getDateTypesRule() {
		return getDateTypesAccess().getRule();
	}
	
	///** 
	// * DATE Token
	// *  
	// */ DATE:
	//	'Date';
	public DATEElements getDATEAccess() {
		return pDATE;
	}
	
	public ParserRule getDATERule() {
		return getDATEAccess().getRule();
	}
	
	///** 
	// * LOCAL_DATE Token
	// *  
	// */ LOCAL_DATE:
	//	'LocalDate';
	public LOCAL_DATEElements getLOCAL_DATEAccess() {
		return pLOCAL_DATE;
	}
	
	public ParserRule getLOCAL_DATERule() {
		return getLOCAL_DATEAccess().getRule();
	}
	
	///** 
	// * ZONED_DATETIME Token
	// *  
	// */ ZONED_DATETIME:
	//	'ZonedDateTime';
	public ZONED_DATETIMEElements getZONED_DATETIMEAccess() {
		return pZONED_DATETIME;
	}
	
	public ParserRule getZONED_DATETIMERule() {
		return getZONED_DATETIMEAccess().getRule();
	}
	
	///** 
	// * INSTANT Token
	// *  
	// */ INSTANT:
	//	'Instant';
	public INSTANTElements getINSTANTAccess() {
		return pINSTANT;
	}
	
	public ParserRule getINSTANTRule() {
		return getINSTANTAccess().getRule();
	}
	
	///** 
	// * Blob Field Type Rule
	// *  
	// */ blobFieldType:
	//	name=blobTypes constraints+=blobValidators*;
	public BlobFieldTypeElements getBlobFieldTypeAccess() {
		return pBlobFieldType;
	}
	
	public ParserRule getBlobFieldTypeRule() {
		return getBlobFieldTypeAccess().getRule();
	}
	
	///** 
	// * Blob Types Rule
	// *  
	// */ blobTypes:
	//	BLOB
	//	| ANY_BLOB
	//	| IMAGE_BLOB
	//	| TEXT_BLOB;
	public BlobTypesElements getBlobTypesAccess() {
		return pBlobTypes;
	}
	
	public ParserRule getBlobTypesRule() {
		return getBlobTypesAccess().getRule();
	}
	
	///** 
	// * BLOB Token
	// *  
	// */ BLOB:
	//	'Blob';
	public BLOBElements getBLOBAccess() {
		return pBLOB;
	}
	
	public ParserRule getBLOBRule() {
		return getBLOBAccess().getRule();
	}
	
	///** 
	// * ANY_BLOB Token
	// *  
	// */ ANY_BLOB:
	//	'AnyBlob';
	public ANY_BLOBElements getANY_BLOBAccess() {
		return pANY_BLOB;
	}
	
	public ParserRule getANY_BLOBRule() {
		return getANY_BLOBAccess().getRule();
	}
	
	///** 
	// * IMAGE_BLOB Token
	// *  
	// */ IMAGE_BLOB:
	//	'ImageBlob';
	public IMAGE_BLOBElements getIMAGE_BLOBAccess() {
		return pIMAGE_BLOB;
	}
	
	public ParserRule getIMAGE_BLOBRule() {
		return getIMAGE_BLOBAccess().getRule();
	}
	
	///** 
	// * TEXT_BLOB Token
	// *  
	// */ TEXT_BLOB:
	//	'TextBlob';
	public TEXT_BLOBElements getTEXT_BLOBAccess() {
		return pTEXT_BLOB;
	}
	
	public ParserRule getTEXT_BLOBRule() {
		return getTEXT_BLOBAccess().getRule();
	}
	
	///* =========================================================================
	// * VALIDATOR
	// * ========================================================================= */ stringValidators:
	//	required=requiredValidator
	//	| minLenght=minLengthValidator
	//	| maxLenght=maxLengthValidator
	//	| pattern=patternValidator;
	public StringValidatorsElements getStringValidatorsAccess() {
		return pStringValidators;
	}
	
	public ParserRule getStringValidatorsRule() {
		return getStringValidatorsAccess().getRule();
	}
	
	//numericValidators:
	//	required=requiredValidator
	//	| minValue=minValidator
	//	| maxValue=maxValidator;
	public NumericValidatorsElements getNumericValidatorsAccess() {
		return pNumericValidators;
	}
	
	public ParserRule getNumericValidatorsRule() {
		return getNumericValidatorsAccess().getRule();
	}
	
	//blobValidators:
	//	required=requiredValidator
	//	| minBytesValue=minBytesValidator
	//	| maxBytesValue=maxBytesValidator;
	public BlobValidatorsElements getBlobValidatorsAccess() {
		return pBlobValidators;
	}
	
	public ParserRule getBlobValidatorsRule() {
		return getBlobValidatorsAccess().getRule();
	}
	
	//requiredValidator:
	//	'required';
	public RequiredValidatorElements getRequiredValidatorAccess() {
		return pRequiredValidator;
	}
	
	public ParserRule getRequiredValidatorRule() {
		return getRequiredValidatorAccess().getRule();
	}
	
	//minLengthValidator:
	//	'minlength' '(' INT ')';
	public MinLengthValidatorElements getMinLengthValidatorAccess() {
		return pMinLengthValidator;
	}
	
	public ParserRule getMinLengthValidatorRule() {
		return getMinLengthValidatorAccess().getRule();
	}
	
	//maxLengthValidator:
	//	'maxlength' '(' INT ')';
	public MaxLengthValidatorElements getMaxLengthValidatorAccess() {
		return pMaxLengthValidator;
	}
	
	public ParserRule getMaxLengthValidatorRule() {
		return getMaxLengthValidatorAccess().getRule();
	}
	
	//patternValidator:
	//	'pattern' '(' PATTERN_VALUE ')';
	public PatternValidatorElements getPatternValidatorAccess() {
		return pPatternValidator;
	}
	
	public ParserRule getPatternValidatorRule() {
		return getPatternValidatorAccess().getRule();
	}
	
	//minValidator:
	//	'min' '(' INT ')';
	public MinValidatorElements getMinValidatorAccess() {
		return pMinValidator;
	}
	
	public ParserRule getMinValidatorRule() {
		return getMinValidatorAccess().getRule();
	}
	
	//maxValidator:
	//	'max' '(' INT ')';
	public MaxValidatorElements getMaxValidatorAccess() {
		return pMaxValidator;
	}
	
	public ParserRule getMaxValidatorRule() {
		return getMaxValidatorAccess().getRule();
	}
	
	//minBytesValidator:
	//	'minbytes' '(' INT ')';
	public MinBytesValidatorElements getMinBytesValidatorAccess() {
		return pMinBytesValidator;
	}
	
	public ParserRule getMinBytesValidatorRule() {
		return getMinBytesValidatorAccess().getRule();
	}
	
	//maxBytesValidator:
	//	'maxbytes' '(' value=INT ')';
	public MaxBytesValidatorElements getMaxBytesValidatorAccess() {
		return pMaxBytesValidator;
	}
	
	public ParserRule getMaxBytesValidatorRule() {
		return getMaxBytesValidatorAccess().getRule();
	}
	
	//cardinality:
	//	ONE_TO_MANY
	//	| MANY_TO_ONE
	//	| ONE_TO_ONE
	//	| MANY_TO_MANY;
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	///* =========================================================================
	// * OPTION 
	// * ========================================================================= */ option:
	//	setting=optionSetting;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//optionSetting:
	//	dtoOption;
	public OptionSettingElements getOptionSettingAccess() {
		return pOptionSetting;
	}
	
	public ParserRule getOptionSettingRule() {
		return getOptionSettingAccess().getRule();
	}
	
	///* =========================================================================
	// * DTO OPTION 
	// * ========================================================================= */ dtoOption:
	//	'dto'?;
	public DtoOptionElements getDtoOptionAccess() {
		return pDtoOption;
	}
	
	public ParserRule getDtoOptionRule() {
		return getDtoOptionAccess().getRule();
	}
	
	//dtoType:
	//	'mapstruct';
	public DtoTypeElements getDtoTypeAccess() {
		return pDtoType;
	}
	
	public ParserRule getDtoTypeRule() {
		return getDtoTypeAccess().getRule();
	}
	
	//PATTERN_VALUE:
	//	'"'* '"';
	public PATTERN_VALUEElements getPATTERN_VALUEAccess() {
		return pPATTERN_VALUE;
	}
	
	public ParserRule getPATTERN_VALUERule() {
		return getPATTERN_VALUEAccess().getRule();
	}
	
	//ONE_TO_MANY:
	//	'OneToMany';
	public ONE_TO_MANYElements getONE_TO_MANYAccess() {
		return pONE_TO_MANY;
	}
	
	public ParserRule getONE_TO_MANYRule() {
		return getONE_TO_MANYAccess().getRule();
	}
	
	//MANY_TO_ONE:
	//	'ManyToOne';
	public MANY_TO_ONEElements getMANY_TO_ONEAccess() {
		return pMANY_TO_ONE;
	}
	
	public ParserRule getMANY_TO_ONERule() {
		return getMANY_TO_ONEAccess().getRule();
	}
	
	//ONE_TO_ONE:
	//	'OneToOne';
	public ONE_TO_ONEElements getONE_TO_ONEAccess() {
		return pONE_TO_ONE;
	}
	
	public ParserRule getONE_TO_ONERule() {
		return getONE_TO_ONEAccess().getRule();
	}
	
	//MANY_TO_MANY:
	//	'ManyToMany';
	public MANY_TO_MANYElements getMANY_TO_MANYAccess() {
		return pMANY_TO_MANY;
	}
	
	public ParserRule getMANY_TO_MANYRule() {
		return getMANY_TO_MANYAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
